[versions]
spring-boot = "3.5.3"
spring-dependency-managment = "1.1.7"
spring-cloud = "2025.0.0"
lombok = "1.18.28"
postgresql = "42.7.7"
spring-kafka = "3.3.7"
liquibase = "4.31.1"
kotlin = "1.9.23"
jwt = "0.11.5"
mapstruct = "1.5.5.Final"


[libraries]
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "spring-boot" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
spring-boot-starter-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "spring-boot" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot"}
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }
spring-boot-starter-data-redis = { module = "org.springframework.boot:spring-boot-starter-data-redis", version.ref = "spring-boot" }
spring-cloud-config-server = { module = "org.springframework.cloud:spring-cloud-config-server"}
spring-cloud-config-client = { module = "org.springframework.cloud:spring-cloud-starter-config"}
spring-cloud-eureka-server = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"}
spring-cloud-eureka-client = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"}
spring-cloud-open-feign = { module = "org.springframework.cloud:spring-cloud-starter-openfeign"}
spring-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "spring-kafka" }
spring-kafka-test = { module = "org.springframework.kafka:spring-kafka-test", version.ref = "spring-kafka" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }
liquibase = { module = "org.liquibase:liquibase-core", version.ref = "liquibase"}
jjwt-api = { module = "io.jsonwebtoken:jjwt-api", version.ref = "jwt" }
jjwt-impl = { module = "io.jsonwebtoken:jjwt-impl", version.ref = "jwt" }
jjwt-jackson = { module = "io.jsonwebtoken:jjwt-jackson", version.ref = "jwt" }
mapstruct = { module = "org.mapstruct:mapstruct", version.ref = "mapstruct" }
mapstruct-processor = { module = "org.mapstruct:mapstruct-processor", version.ref = "mapstruct" }



[plugins]
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-managment"}
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
